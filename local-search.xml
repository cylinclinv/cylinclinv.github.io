<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo插入图片的配置</title>
    <link href="/2018/06/01/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/06/01/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在blog的目录下安装插件"><a href="#在blog的目录下安装插件" class="headerlink" title="在blog的目录下安装插件"></a>在blog的目录下安装插件</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><h2 id="在配置文件-config-yml-找到-post-asset-folder-设置true"><a href="#在配置文件-config-yml-找到-post-asset-folder-设置true" class="headerlink" title="在配置文件_config.yml,找到 post_asset_folder,设置true"></a>在配置文件_config.yml,找到 post_asset_folder,设置true</h2><h2 id="将该目录下替换为后面的代码"><a href="#将该目录下替换为后面的代码" class="headerlink" title="将该目录下替换为后面的代码"></a>将该目录下替换为后面的代码</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/node_modules/</span>hexo-asset-image/index.js<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.config;<br>  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;<br>        <span class="hljs-keyword">var</span> link = data.permalink;<br>    <span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.substring(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br>            <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>            <span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;<br>               !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;<br>              <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>              <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>              <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)<br>                srcArray.shift();<br>              src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);<br>              $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);<br>              <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.html();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>第四步：现在就可以插入图片了，比如hexo new post photo之后<br> 就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br> 在photo.md文件里面按markdown的标准写,（我的文件名是head.jpeg）比如</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[这是代替图片的文字，随便写]</span>(head.jpeg)<br></code></pre></td></tr></table></figure><h2 id="Fluid主题下直接使用静态图片"><a href="#Fluid主题下直接使用静态图片" class="headerlink" title="Fluid主题下直接使用静态图片"></a>Fluid主题下直接使用静态图片</h2><p>将图片放置在</p><blockquote><p>blog/themes/Fluid/source/img/</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">![图片](<span class="hljs-regexp">/img/</span>pp.jpg)<br></code></pre></td></tr></table></figure><p><img src="/img/pp.jpg" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo文章头示意</title>
    <link href="/2018/06/01/hexo%E6%96%87%E7%AB%A0%E5%A4%B4%E7%A4%BA%E6%84%8F/"/>
    <url>/2018/06/01/hexo%E6%96%87%E7%AB%A0%E5%A4%B4%E7%A4%BA%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: hexo文章和mrkdown使用笔记   //标题<br>date: 2018-06-01 11:53:40    //时间<br>tags: hexo      //标签<br>author: clyde   //作者<br>index_img: /img/pp.jpg   //封面图片<br>banner_img: /img/pp.jpg  //文章头部图片<br>categories: web        //分类<br>啦啦啦<br>sticky: 4   //排序,将这个设置很大可以做出置顶效果</p><hr>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo文章和mrkdown使用笔记</title>
    <link href="/2018/06/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2018/06/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h3><hr><h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2#标题"></a>2#标题</h3><h3 id="3-标题"><a href="#3-标题" class="headerlink" title="3#标题"></a>3#标题</h3><blockquote><p>左竖线<br>  jkjkj<br>dfd<br>  <groupId>com.clyde</groupId><br>   <artifactId>documentproject01</artifactId><br>  <version>1.0-SNAPSHOT</version></p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/F502513A43624EA2B0CABECB87458E06?method=download&shareKey=b71b33f21f65f970e83136b29cac5ac5" alt="外链图片"></p><p>这是测试文章</p><blockquote><p>github创建仓库,在issue中拖入图片,下方文档中就有md格式图片链接<br><img src="https://user-images.githubusercontent.com/32689857/120270452-34d68600-c2dc-11eb-84f0-134ab94b9b39.png" alt="github图床图片"></p></blockquote><h3 id="分割线"><a href="#分割线" class="headerlink" title="*分割线"></a>*分割线</h3><hr><hr><hr><hr><h3 id="斜体粗体"><a href="#斜体粗体" class="headerlink" title="*斜体粗体"></a>*斜体粗体</h3><p><em>jhhh</em>  </p><p><em>zhegeshi</em></p><h3 id="后面空两行或者隔一行来换行"><a href="#后面空两行或者隔一行来换行" class="headerlink" title="*后面空两行或者隔一行来换行"></a>*后面空两行或者隔一行来换行</h3><p><strong>及健康健康</strong><br><strong>即将开机</strong></p><h3 id="删除线-下划线"><a href="#删除线-下划线" class="headerlink" title="*删除线,下划线"></a>*删除线,下划线</h3><p><del>寄几个</del></p><p><u>即将开机公开</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="*脚注"></a>*脚注</h3><p>这个是脚注[^rrr]</p><h3 id="列表"><a href="#列表" class="headerlink" title="*列表"></a>*列表</h3><p>列表1:<br>    - aaaa<br>    - bbb<br>    - cccc</p><h3 id="区块"><a href="#区块" class="headerlink" title="*区块"></a>*区块</h3><blockquote><p>aaa<br>jkjk<br>jkjk<br>kjkj<br>jkjijkj</p></blockquote><h3 id="表格"><a href="#表格" class="headerlink" title="*表格"></a>*表格</h3><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><pre><code class=" mermaid">graph TD开始 --&gt; 结束</code></pre><pre><code class=" mermaid">sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!</code></pre><pre><code class=" mermaid">flowst=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs">代码分割块<br>代码分割块<br>代码分割块代码分割块<br>代码分割块代码分割块<br>代码分割块代码分割块代码分割块<br>代码分割块代码分割块代码分割块<br>代码分割块代码分割块代码分割块代码分割块<br>代码分割块代码分割块代码分割块代码分割块<br><br></code></pre></td></tr></table></figure><p><img src="/img/pp.jpg" alt="jijkl"></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=46303362&cid=81124889&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div><br>视频分割<hr><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=838863398&bvid=BV1F54y1S7WT&cid=209620845&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASCII编码</title>
    <link href="/2016/02/01/ASCII%E7%BC%96%E7%A0%81%E8%A1%A8/"/>
    <url>/2016/02/01/ASCII%E7%BC%96%E7%A0%81%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0010 0000</td><td>32</td><td>20</td><td>（空格）(␠)</td></tr><tr><td>0010 0001</td><td>33</td><td>21</td><td>!</td></tr><tr><td>0010 0010</td><td>34</td><td>22</td><td>“</td></tr><tr><td>0010 0011</td><td>35</td><td>23</td><td>#</td></tr><tr><td>0010 0100</td><td>36</td><td>24</td><td>$</td></tr><tr><td>0010 0101</td><td>37</td><td>25</td><td>%</td></tr><tr><td>0010 0110</td><td>38</td><td>26</td><td>&amp;</td></tr><tr><td>0010 0111</td><td>39</td><td>27</td><td>‘</td></tr><tr><td>0010 1000</td><td>40</td><td>28</td><td>(</td></tr><tr><td>0010 1001</td><td>41</td><td>29</td><td>)</td></tr><tr><td>0010 1010</td><td>42</td><td>2A</td><td>*</td></tr><tr><td>0010 1011</td><td>43</td><td>2B</td><td>+</td></tr><tr><td>0010 1100</td><td>44</td><td>2C</td><td>,</td></tr><tr><td>0010 1101</td><td>45</td><td>2D</td><td>-</td></tr><tr><td>0010 1110</td><td>46</td><td>2E</td><td>.</td></tr><tr><td>0010 1111</td><td>47</td><td>2F</td><td>/</td></tr><tr><td>0011 0000</td><td>48</td><td>30</td><td>0</td></tr><tr><td>0011 0001</td><td>49</td><td>31</td><td>1</td></tr><tr><td>0011 0010</td><td>50</td><td>32</td><td>2</td></tr><tr><td>0011 0011</td><td>51</td><td>33</td><td>3</td></tr><tr><td>0011 0100</td><td>52</td><td>34</td><td>4</td></tr><tr><td>0011 0101</td><td>53</td><td>35</td><td>5</td></tr><tr><td>0011 0110</td><td>54</td><td>36</td><td>6</td></tr><tr><td>0011 0111</td><td>55</td><td>37</td><td>7</td></tr><tr><td>0011 1000</td><td>56</td><td>38</td><td>8</td></tr><tr><td>0011 1001</td><td>57</td><td>39</td><td>9</td></tr><tr><td>0011 1010</td><td>58</td><td>3A</td><td>:</td></tr><tr><td>0011 1011</td><td>59</td><td>3B</td><td>;</td></tr><tr><td>0011 1100</td><td>60</td><td>3C</td><td>&lt;</td></tr><tr><td>0011 1101</td><td>61</td><td>3D</td><td>=</td></tr><tr><td>0011 1110</td><td>62</td><td>3E</td><td>&gt;</td></tr><tr><td>0011 1111</td><td>63</td><td>3F</td><td>?</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0100 0000</td><td>64</td><td>40</td><td>@</td></tr><tr><td>0100 0001</td><td>65</td><td>41</td><td>A</td></tr><tr><td>0100 0010</td><td>66</td><td>42</td><td>B</td></tr><tr><td>0100 0011</td><td>67</td><td>43</td><td>C</td></tr><tr><td>0100 0100</td><td>68</td><td>44</td><td>D</td></tr><tr><td>0100 0101</td><td>69</td><td>45</td><td>E</td></tr><tr><td>0100 0110</td><td>70</td><td>46</td><td>F</td></tr><tr><td>0100 0111</td><td>71</td><td>47</td><td>G</td></tr><tr><td>0100 1000</td><td>72</td><td>48</td><td>H</td></tr><tr><td>0100 1001</td><td>73</td><td>49</td><td>I</td></tr><tr><td>0100 1010</td><td>74</td><td>4A</td><td>J</td></tr><tr><td>0100 1011</td><td>75</td><td>4B</td><td>K</td></tr><tr><td>0100 1100</td><td>76</td><td>4C</td><td>L</td></tr><tr><td>0100 1101</td><td>77</td><td>4D</td><td>M</td></tr><tr><td>0100 1110</td><td>78</td><td>4E</td><td>N</td></tr><tr><td>0100 1111</td><td>79</td><td>4F</td><td>O</td></tr><tr><td>0101 0000</td><td>80</td><td>50</td><td>P</td></tr><tr><td>0101 0001</td><td>81</td><td>51</td><td>Q</td></tr><tr><td>0101 0010</td><td>82</td><td>52</td><td>R</td></tr><tr><td>0101 0011</td><td>83</td><td>53</td><td>S</td></tr><tr><td>0101 0100</td><td>84</td><td>54</td><td>T</td></tr><tr><td>0101 0101</td><td>85</td><td>55</td><td>U</td></tr><tr><td>0101 0110</td><td>86</td><td>56</td><td>V</td></tr><tr><td>0101 0111</td><td>87</td><td>57</td><td>W</td></tr><tr><td>0101 1000</td><td>88</td><td>58</td><td>X</td></tr><tr><td>0101 1001</td><td>89</td><td>59</td><td>Y</td></tr><tr><td>0101 1010</td><td>90</td><td>5A</td><td>Z</td></tr><tr><td>0101 1011</td><td>91</td><td>5B</td><td>[</td></tr><tr><td>0101 1100</td><td>92</td><td>5C</td><td>\</td></tr><tr><td>0101 1101</td><td>93</td><td>5D</td><td>]</td></tr><tr><td>0101 1110</td><td>94</td><td>5E</td><td>^</td></tr><tr><td>0101 1111</td><td>95</td><td>5F</td><td>_</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0110 0000</td><td>96</td><td>60</td><td>`</td></tr><tr><td>0110 0001</td><td>97</td><td>61</td><td>a</td></tr><tr><td>0110 0010</td><td>98</td><td>62</td><td>b</td></tr><tr><td>0110 0011</td><td>99</td><td>63</td><td>c</td></tr><tr><td>0110 0100</td><td>100</td><td>64</td><td>d</td></tr><tr><td>0110 0101</td><td>101</td><td>65</td><td>e</td></tr><tr><td>0110 0110</td><td>102</td><td>66</td><td>f</td></tr><tr><td>0110 0111</td><td>103</td><td>67</td><td>g</td></tr><tr><td>0110 1000</td><td>104</td><td>68</td><td>h</td></tr><tr><td>0110 1001</td><td>105</td><td>69</td><td>i</td></tr><tr><td>0110 1010</td><td>106</td><td>6A</td><td>j</td></tr><tr><td>0110 1011</td><td>107</td><td>6B</td><td>k</td></tr><tr><td>0110 1100</td><td>108</td><td>6C</td><td>l</td></tr><tr><td>0110 1101</td><td>109</td><td>6D</td><td>m</td></tr><tr><td>0110 1110</td><td>110</td><td>6E</td><td>n</td></tr><tr><td>0110 1111</td><td>111</td><td>6F</td><td>o</td></tr><tr><td>0111 0000</td><td>112</td><td>70</td><td>p</td></tr><tr><td>0111 0001</td><td>113</td><td>71</td><td>q</td></tr><tr><td>0111 0010</td><td>114</td><td>72</td><td>r</td></tr><tr><td>0111 0011</td><td>115</td><td>73</td><td>s</td></tr><tr><td>0111 0100</td><td>116</td><td>74</td><td>t</td></tr><tr><td>0111 0101</td><td>117</td><td>75</td><td>u</td></tr><tr><td>0111 0110</td><td>118</td><td>76</td><td>v</td></tr><tr><td>0111 0111</td><td>119</td><td>77</td><td>w</td></tr><tr><td>0111 1000</td><td>120</td><td>78</td><td>x</td></tr><tr><td>0111 1001</td><td>121</td><td>79</td><td>y</td></tr><tr><td>0111 1010</td><td>122</td><td>7A</td><td>z</td></tr><tr><td>0111 1011</td><td>123</td><td>7B</td><td>{</td></tr><tr><td>0111 1100</td><td>124</td><td>7C</td><td>|</td></tr><tr><td>0111 1101</td><td>125</td><td>7D</td><td>}</td></tr><tr><td>0111 1110</td><td>126</td><td>7E</td><td>~</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASCII编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基礎01</title>
    <link href="/2016/02/01/java%E5%9F%BA%E7%A1%8001/"/>
    <url>/2016/02/01/java%E5%9F%BA%E7%A1%8001/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p>生活采用十进制数，而计算机中全部采用二进制数表示，它只包含 0、1两个数，逢二进一，1+1=10。每一个0或者每一个1，叫做一个bit（比特） </p><h3 id="十进制数据转成二进制数据"><a href="#十进制数据转成二进制数据" class="headerlink" title="十进制数据转成二进制数据:"></a>十进制数据转成二进制数据:</h3><p>使用除以2获取余数的方式  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">6/<span class="hljs-attribute">2</span>=3---&gt;0<br>3/<span class="hljs-attribute">2</span>=1---&gt;1<br>1/<span class="hljs-attribute">2</span>=0---&gt;1<br>由此获得110<br></code></pre></td></tr></table></figure><h3 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">二进制1001011转换十进制数<br>1 <span class="hljs-number"> 0 </span><span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span> 1<br>64<span class="hljs-number"> 32 </span>16<span class="hljs-number"> 8 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 2 </span> 1<br>将有1的所有十进制数加起来<br>64+8+2+1=75<br></code></pre></td></tr></table></figure><h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><p>字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。 8个bit（二进制位） 0000-0000表示为1个字节，写成1 byte或者1 B。</p><p> 8 bit = 1 B </p><p>1024 B =1 KB </p><p>1024 KB =1 MB </p><p>1024 MB =1 GB </p><p>1024 GB = 1 TB</p><h2 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h2><table><thead><tr><th>盘符切换命令</th><th>盘符名:  //例如d:</th></tr></thead><tbody><tr><td>查看当前文件夹</td><td>dir</td></tr><tr><td>进入文件夹命令</td><td>cd 文件夹名</td></tr><tr><td>退出文件夹命令</td><td>cd..</td></tr><tr><td>退出到磁盘根目录</td><td>cd\</td></tr><tr><td>清屏</td><td>cls</td></tr><tr><td>查看IP地址</td><td>ipconfig</td></tr><tr><td>ping网络</td><td>ping IP地址</td></tr><tr><td>telnet测试连通性</td><td>telnet  IP地址</td></tr></tbody></table><p>其它</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>记事本</td><td>notepad</td></tr><tr><td>计算器</td><td>calc</td></tr><tr><td>打开typora</td><td>安装typora后,typora</td></tr><tr><td>打开vscode</td><td>code</td></tr><tr><td>打开服务</td><td>services.msc</td></tr><tr><td>打开控制面板</td><td>control</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="jdk环境变量配置"><a href="#jdk环境变量配置" class="headerlink" title="jdk环境变量配置"></a>jdk环境变量配置</h2><p>安装jdk,jdk安装路径建议不要默认,修改在c盘默认路径java文件夹,默认路径带空格,会导致一些框架引用jdk配置出现问题</p><p>打开环境变量</p><blockquote><p>计算机(右键-属性)-&gt;高级系统设置-&gt;环境变量</p></blockquote><p>新建配置</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">JAV<span class="hljs-built_in">A_HOME</span><br>jdk安装路径<br></code></pre></td></tr></table></figure><p>在path路径添加配置</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\bin; <br></code></pre></td></tr></table></figure><p>cmd命令行输入测试是否成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br>javac<br></code></pre></td></tr></table></figure><h2 id="java运行流程"><a href="#java运行流程" class="headerlink" title="java运行流程"></a>java运行流程</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">javac hello.java <span class="hljs-regexp">//</span>编译器将Java文件编译字节码文件,生成hello.class<br><br>Java hello <span class="hljs-regexp">//</span>运行生成的hello.class<br><br></code></pre></td></tr></table></figure><h2 id="单行注释和多行注释"><a href="#单行注释和多行注释" class="headerlink" title="单行注释和多行注释"></a>单行注释和多行注释</h2><p>单行注释以 //开头 换行结束 多行注释以 /<em>开头 以</em>/结束</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>命名规则： 硬性要求 </p><ul><li>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _（下划线） 。 </li><li>标识符不能以数字开头。 </li><li>标识符不能是关键字。 </li></ul><p>命名规范： 软性建议 </p><ul><li><p>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。</p></li><li><p>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。</p></li><li><p>变量名规范：全部小写。</p></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>字节型  byte 1个字节 -128<del>127<br>短整型  short 2个字节 -32768</del>32767<br>整型  int（默认） 4个字节 -231次方<del>2的31次方-1<br>长整型  long 8个字节 -2的63次方</del>2的63次方-1<br>单精度浮点数  float 4个字节 1.4013E-45<del>3.4028E+38<br>双精度浮点数  double（默认） 8个字节 4.9E-324</del>1.7977E+308<br>字符型  char 2个字节 0-65535<br>布尔类型  boolean 1个字节 true，false</p><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p>自动转换：将 取值范围小的类型 自动提升为 取值范围大的类型 。</p><p>byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类型。<br>当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br><span class="hljs-built_in">byte</span> b = <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>// <span class="hljs-built_in">byte</span> x = b + i<span class="hljs-comment">; // 报错</span><br>//<span class="hljs-keyword">int</span>类型和<span class="hljs-built_in">byte</span>类型运算，结果是<span class="hljs-keyword">int</span>类型<br><span class="hljs-keyword">int</span> j = b + i<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>double 类型内存8个字节， int 类型内存4个字节。 1.5 是 double 类型，取值范围大于 int 。可以理解为 double 是8升的水壶， int 是4升的水壶，不能把大水壶中的水直接放进小水壶去。想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。<br>强制类型转换：将 取值范围大的类型 强制转换成 取值范围小的类型 。<br>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><p>数据类型 变量名 = （数据类型）被转数据值；</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">// <span class="hljs-keyword">double</span>类型数据强制转成<span class="hljs-built_in">int</span>类型，直接去掉小数点。<br><span class="hljs-built_in">int</span> i = (<span class="hljs-built_in">int</span>)<span class="hljs-number">1.5</span>;<br><br></code></pre></td></tr></table></figure><p>浮点转成整数，直接取消小数点，可能造成数据损失精度。<br>int 强制转成 short 砍掉2个字节，可能造成数据丢失。</p><h2 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h2><p>在计算机的内部都是二进制的0、1数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。<br>编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。</p><h3 id="ASCII可显示字符"><a href="#ASCII可显示字符" class="headerlink" title="ASCII可显示字符"></a>ASCII可显示字符</h3><p>字符 数值<br>0 48<br>9 57<br>A 65<br>Z 90<br>a 97<br>z 122</p><h2 id="算数运算符包括："><a href="#算数运算符包括：" class="headerlink" title="算数运算符包括："></a>算数运算符包括：</h2><ul><li>加法运算，字符串连接运算</li></ul><ul><li>减法运算</li></ul><ul><li>乘法运算<br>/ 除法运算<br>% 取模运算，两个数字相除取余数</li></ul><p>++ 、 – 自增自减运算</p><h2 id="赋值运算符包括："><a href="#赋值运算符包括：" class="headerlink" title="赋值运算符包括："></a>赋值运算符包括：</h2><p>= 等于号<br>+= 加等于<br>-= 减等于<br>*= 乘等于<br>/= 除等于<br>%= 取模等</p><h2 id="比较运算符包括："><a href="#比较运算符包括：" class="headerlink" title="比较运算符包括："></a>比较运算符包括：</h2><p>== 比较符号两边数据是否相等，相等结果是true。<br>&lt; 比较符号左边的数据是否小于右边的数据，如果小于结果是true。</p><blockquote><p>比较符号左边的数据是否大于右边的数据，如果大于结果是true。<br>&lt;= 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。<br>= 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。<br>！= 不等于符号 ，如果符号两边的数据不相等，结果是true。</p></blockquote><h2 id="逻辑运算符包括："><a href="#逻辑运算符包括：" class="headerlink" title="逻辑运算符包括："></a>逻辑运算符包括：</h2><p>&amp;&amp; 短路与</p><ol><li>两边都是true，结果是true</li><li>一边是false，结果是false<br>短路特点：符号左边是false，右边不再运算<br>|| 短路或</li><li>两边都是false，结果是false</li><li>一边是true，结果是true<br>短路特点： 符号左边是true，右边不再运算<br>！ 取反</li><li>! true 结果是false</li><li>! false结果是true</li></ol><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>数据类型 变量名 = 布尔类型表达式？结果1：结果2</p><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">修饰符 返回值类型 方法名 （参数列表）｛<br>代码...<br><span class="hljs-keyword">return</span> ;<br>｝<br></code></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(String[] args) <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">//调用定义的方法method</span><br><span class="hljs-comment">method();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">//定义方法，被main方法调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-function"><span class="hljs-keyword">method</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">System.out.println(&quot;自己定义的方法，需要被main调用运行&quot;);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br></code></pre></td></tr></table></figure><h2 id="方法定义注意事项："><a href="#方法定义注意事项：" class="headerlink" title="方法定义注意事项："></a>方法定义注意事项：</h2><ul><li>方法必须定义在一类中方法外</li><li>方法不能定义在另一个方法的里面</li></ul><h2 id="JShell脚本工具"><a href="#JShell脚本工具" class="headerlink" title="JShell脚本工具"></a>JShell脚本工具</h2><p>JShell是JDK9的新特性<br>当我们编写的代码非常少的时候，而又不愿意编写类，main方法，也不愿意去编译和运行，这个时候可以使用JShell工具。<br>启动JShell工具，在DOS命令行直接输入JShell命令。<br>JShell工具，只适合片段代码的测试，开发更多内容，建议编写在方法中。</p><h2 id="if语句第一种格式：-if"><a href="#if语句第一种格式：-if" class="headerlink" title="if语句第一种格式： if"></a>if语句第一种格式： if</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if(关系表达式)｛<br>语句体<span class="hljs-comment">;</span><br>｝<br></code></pre></td></tr></table></figure><h2 id="if语句第二种格式：-if…else"><a href="#if语句第二种格式：-if…else" class="headerlink" title="if语句第二种格式： if…else"></a>if语句第二种格式： if…else</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if(关系表达式) &#123;<br>语句体<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;else &#123;<br>语句体<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if语句第三种格式：-if…else-if-…else"><a href="#if语句第三种格式：-if…else-if-…else" class="headerlink" title="if语句第三种格式： if…else if …else"></a>if语句第三种格式： if…else if …else</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (判断条件<span class="hljs-number">1</span>) &#123;<br>执行语句<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件<span class="hljs-number">2</span>)</span> </span>&#123;<br>执行语句<span class="hljs-number">2</span>;<br>&#125;<br>...<br>&#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件n)</span> </span>&#123;<br>执行语句n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>执行语句n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch语句格式："><a href="#switch语句格式：" class="headerlink" title="switch语句格式："></a>switch语句格式：</h2><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运行，直到遇到break，或者整体switch结束</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(表达式) &#123;<br><span class="hljs-keyword">case</span> 常量值<span class="hljs-number">1</span>:<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 常量值<span class="hljs-number">2</span>:<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>...<br><span class="hljs-keyword">default</span>:<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for循环语句格式："><a href="#for循环语句格式：" class="headerlink" title="for循环语句格式："></a>for循环语句格式：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(初始化表达式①; 布尔表达式②; 步进表达式④)</span></span>&#123;<br>循环体③<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while循环语句格式："><a href="#while循环语句格式：" class="headerlink" title="while循环语句格式："></a>while循环语句格式：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">初始化表达式①<br><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(布尔表达式②)</span></span>&#123;<br>循环体③<br>步进表达式④<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="do…while循环格式"><a href="#do…while循环格式" class="headerlink" title="do…while循环格式"></a>do…while循环格式</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">初始化表达式①<br><span class="hljs-keyword">do</span>&#123;<br>循环体③<br>步进表达式④<br>&#125;<span class="hljs-keyword">while</span><span class="hljs-comment">(布尔表达式②)</span>;<br><br></code></pre></td></tr></table></figure><h2 id="for-和-while-的小区别："><a href="#for-和-while-的小区别：" class="headerlink" title="for 和 while 的小区别："></a>for 和 while 的小区别：</h2><ul><li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消<br>失，能够提高内存的使用效率。</li><li>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。</li></ul><h2 id="idea快捷键-功能"><a href="#idea快捷键-功能" class="headerlink" title="idea快捷键 功能"></a>idea快捷键 功能</h2><p>Alt+Enter 导入包，自动修正代码<br>Ctrl+Y 删除光标所在行<br>Ctrl+D 复制光标所在行的内容，插入光标位置下面<br>Ctrl+Alt+L 格式化代码<br>Ctrl+/ 单行注释<br>Ctrl+Shift+/ 选中代码注释，多行注释，再按取消注释<br>Alt+Ins 自动生成代码，toString，get，set等方法<br>Alt+Shift+上下箭头 移动当前代码行</p><h2 id="容器概念"><a href="#容器概念" class="headerlink" title="容器概念"></a>容器概念</h2><p>容器：是将多个数据存储到一起，每个数据称为该容器的元素。</p><h2 id="数组概念"><a href="#数组概念" class="headerlink" title="数组概念"></a>数组概念</h2><p>数组概念： 数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">数组存储的数据类型[] 数组名字 = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>数组存储的数据类型[长度];<br></code></pre></td></tr></table></figure><ul><li>数组定义格式详解：</li><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。</li><li>[] : 表示数组。</li><li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li><li>new：关键字，创建数组使用的关键字。</li><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。</li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li><li>注意：数组有定长特性，长度一旦指定，不可更改。和水杯道理相同，买了一个2升的水杯，总容量就是2升，不能多也不能少。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr = new int[<span class="hljs-number">3</span>];<br><span class="hljs-attribute">int</span>[] arr = new int[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">数据类型[] 数组名 = </span><span class="hljs-template-variable">&#123;元素1,元素2,元素3...&#125;</span><span class="xml">;</span><br><span class="xml">int[] arr = </span><span class="hljs-template-variable">&#123;1,2,3,4,5&#125;</span><span class="xml">;</span><br></code></pre></td></tr></table></figure><p>数组的长度属性</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//打印数组的属性，输出结果是5</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(arr.length);<br></code></pre></td></tr></table></figure><p>索引访问数组中的元素：</p><ul><li>数组名[索引]=数值，为数组中的元素赋值</li><li>变量=数组名[索引]，获取出数组中的元素<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//定义存储int类型数组，赋值元素1，2，3，4，5</span><br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//为0索引元素赋值为6</span><br>arr<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = <span class="hljs-number">6</span>;<br><span class="hljs-comment">//获取数组0索引上的元素</span><br><span class="hljs-built_in">int</span> i = arr<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(i);<br><span class="hljs-comment">//直接输出数组0索引元素</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(arr<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br></code></pre></td></tr></table></figure><h2 id="内存概述"><a href="#内存概述" class="headerlink" title="内存概述"></a>内存概述</h2>内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。<br>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。<h2 id="JVM的内存划分："><a href="#JVM的内存划分：" class="headerlink" title="JVM的内存划分："></a>JVM的内存划分：</h2>寄存器         //给CPU使用，和我们开发无关。<br>本地方法栈 //JVM在使用操作系统功能的时候使用，和我们开发无关。<br>方法区         //存储可以运行的class文件。<br>堆内存         //存储对象或者数组，new来创建的，都存储在堆内存。<br>方法栈         //方法运行时使用的内存，比如main方法运行，进入方法栈中执行。<h3 id="一个内存"><a href="#一个内存" class="headerlink" title="一个内存"></a>一个内存</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>System.out.<span class="hljs-built_in">println</span>(arr);<span class="hljs-comment">//[I@5f150435</span><br>&#125;<br></code></pre></td></tr></table></figure>以上方法执行，输出的结果是[I@5f150435，这个是什么呢？是数组在内存中的地址。new出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的地址。<br>输出arr[0]，就会输出arr保存的内存地址中数组中0索引上的元素<br><img src="/img/cphoto/array01.jpg" alt="array内存图"><h3 id="两个内存"><a href="#两个内存" class="headerlink" title="两个内存"></a>两个内存</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>System.out.<span class="hljs-built_in">println</span>(arr);<br>System.out.<span class="hljs-built_in">println</span>(arr2);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/img/cphoto/array02.jpg" alt="array内存图"></li></ul><h3 id="两个变量指向一个数组"><a href="#两个变量指向一个数组" class="headerlink" title="两个变量指向一个数组"></a>两个变量指向一个数组</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">// 定义数组，存储3个元素</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br><span class="hljs-comment">//数组索引进行赋值</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">5</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">6</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>;<br><span class="hljs-comment">//输出3个索引上的元素值</span><br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">0</span>]);<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">1</span>]);<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//定义数组变量arr2，将arr的地址赋值给arr2</span><br><span class="hljs-keyword">int</span>[] arr2 = arr;<br>arr2[<span class="hljs-number">1</span>] = <span class="hljs-number">9</span>;<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/cphoto/array03.jpg" alt="array内存图"></p><h3 id="数组越界异常"><a href="#数组越界异常" class="headerlink" title="数组越界异常"></a>数组越界异常</h3><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 rrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p><h3 id="数组空指针异常"><a href="#数组空指针异常" class="headerlink" title="数组空指针异常"></a>数组空指针异常</h3><p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="/img/cphoto/array04.jpg" alt="array内存图"></p><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>System.<span class="hljs-keyword">out</span>.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环中定义变量min=0最小索引</span><br><span class="hljs-comment">max=arr.length‐1最大索引</span><br><span class="hljs-comment">min++,max‐‐</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-built_in">min</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">max</span> = arr.<span class="hljs-built_in">length</span> ‐ <span class="hljs-number">1</span>; <span class="hljs-built_in">min</span> &lt;= <span class="hljs-built_in">max</span>; <span class="hljs-built_in">min</span>++, <span class="hljs-built_in">max</span>‐‐) &#123;<br>    <span class="hljs-comment">//利用第三方变量完成数组中的元素交换</span><br>    <span class="hljs-type">int</span> temp = arr[<span class="hljs-built_in">min</span>];<br>    arr[<span class="hljs-built_in">min</span>] = arr[<span class="hljs-built_in">max</span>];<br>    arr[<span class="hljs-built_in">max</span>] = temp;<br>&#125;<br><span class="hljs-comment">// 反转后，遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>System.<span class="hljs-keyword">out</span>.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组作为方法参数"><a href="#数组作为方法参数" class="headerlink" title="数组作为方法参数"></a>数组作为方法参数</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span> &#125;;<br>        <span class="hljs-comment">//调用方法，传递数组</span><br>        <span class="hljs-built_in">printArray</span>(arr);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建方法，方法接收数组类型的参数</span><br><span class="hljs-comment">进行数组的遍历</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.<span class="hljs-built_in">println</span>(arr[i]);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/cphoto/array05.jpg" alt="array内存图"></p><h3 id="方法的参数类型区别"><a href="#方法的参数类型区别" class="headerlink" title="方法的参数类型区别"></a>方法的参数类型区别</h3><p> 方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基礎02</title>
    <link href="/2016/02/01/java%E5%9F%BA%E7%A4%8E02/"/>
    <url>/2016/02/01/java%E5%9F%BA%E7%A4%8E02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述类事物。<br>属性：就是该事物的状态信息。<br>行为：就是该事物能够做什么。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
